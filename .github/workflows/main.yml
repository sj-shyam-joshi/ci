name: Feature Branch PR Validation

on:
  pull_request:
    branches:
      - 'ui/release/*' # Apply to branches matching the 'feature/' pattern
    types:
      - opened
      - reopened
      - edited
      - synchronize

jobs:
  validate-pr:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Ensure PR has enough assignees
      - name: Check Minimum Assignees
        uses: actions/github-script@v6
        with:
          script: |
            const MIN_ASSIGNEES = 5;
            const assignees = context.payload.pull_request.assignees;
            if (assignees.length < MIN_ASSIGNEES) {
              throw new Error(`This pull request must have at least ${MIN_ASSIGNEES} assignees. Current count: ${assignees.length}`);
            }

      # Step 2: Validate PR Title
      - name: Validate PR Title
        uses: actions/github-script@v6
        with:
          script: |
            const MIN_WORDS = 10;
            const TICKET_REGEX = /[A-Z]+-\d+/; // Matches ticket numbers like 'PROJ-1234'
            const title = context.payload.pull_request.title;

            const wordCount = title.split(' ').filter(word => word.trim().length > 0).length;
            if (wordCount < MIN_WORDS) {
              throw new Error(`The PR title must have at least ${MIN_WORDS} words. Current count: ${wordCount}`);
            }

            if (!TICKET_REGEX.test(title)) {
              throw new Error(`The PR title must include a ticket number (e.g., 'PROJ-1234'). Current title: "${title}"`);
            }

      # Step 3: Ensure CI Checks Passed
      - name: Validate CI Pipeline
        uses: actions/github-script@v6
        with:
          script: |
            const status = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha,
            });

            const ciChecks = status.data.check_runs.filter(check => check.conclusion !== 'success');
            if (ciChecks.length > 0) {
              throw new Error(`CI checks are not passing. Failing checks: ${ciChecks.map(check => check.name).join(', ')}`);
            }

      # Step 4: Linting Check
      - name: Run Linter
        run: |
          npm install
          npm run lint
        continue-on-error: false

      # Step 5: Run Unit Tests
      - name: Run Unit Tests
        run: |
          npm install
          npm test
        continue-on-error: false

      # Step 6: Code Coverage Threshold
      - name: Check Code Coverage
        run: |
          npm run test:coverage
          coverage=$(cat coverage-summary.txt | grep -E 'Statements' | awk '{print $3}')
          if [ $(echo "$coverage < 80" | bc -l) -eq 1 ]; then
            echo "Code coverage is below 80%. Current: $coverage%"
            exit 1
          fi
        shell: bash

      # Step 7: Check for Documentation Changes
      - name: Ensure Documentation is Updated
        run: |
          git diff --name-only origin/main | grep -E 'docs/|README.md'
        continue-on-error: false
